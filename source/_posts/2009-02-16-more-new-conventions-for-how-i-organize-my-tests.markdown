---
layout: post
title: "More new conventions for how I organize my tests!!"
comments: true
date: 2009-02-16 09:00
categories:
- bdd
- c sharp
---

As the current project I am on is getting fairly large now, I just recently switched around the way I organize my tests. Here is a sample concern pulled from a main class in my application (smart client based):  <div style="font-size: 14pt; background: black; color: white; font-family: consolas">   <p style="margin: 0px"><span style="color: #ff8000">public</span> <span style="color: #ff8000">class</span> <span style="color: yellow">ApplicationControllerSpecs</span>    <p style="margin: 0px">{    <p style="margin: 0px"> <span style="color: #ff8000">public</span> <span style="color: #ff8000">abstract</span> <span style="color: #ff8000">class</span> <span style="color: yellow">concern</span> : <span style="color: yellow">observations_for_a_sut_with_a_contract</span><<span style="color: #2b91af">IApplicationController</span>, <span style="color: yellow">ApplicationController</span>>    <p style="margin: 0px"> {    <p style="margin: 0px"> <span style="color: #ff8000">protected</span> <span style="color: #2b91af">IApplicationShellView</span> shell_presenter;    <p style="margin: 0px"> }    <p style="margin: 0px">    <p style="margin: 0px"> [<span style="color: yellow">Concern</span>(<span style="color: #ff8000">typeof</span> (<span style="color: yellow">ApplicationController</span>))]    <p style="margin: 0px"> <span style="color: #ff8000">public</span> <span style="color: #ff8000">class</span> <span style="color: yellow">when_starting_up</span> : <span style="color: yellow">concern</span>    <p style="margin: 0px"> {    <p style="margin: 0px"> <span style="color: #2b91af">context</span> c = () =>    <p style="margin: 0px"> {    <p style="margin: 0px"> application_shell = the_dependency<<span style="color: #2b91af">IApplicationShellPresenter</span>>();    <p style="margin: 0px"> start_all_modules = the_dependency<<span style="color: #2b91af">IStartAllModules</span>>();    <p style="margin: 0px"> event_aggregator = the_dependency<<span style="color: #2b91af">IEventAggregator</span>>();    <p style="margin: 0px"> };    <p style="margin: 0px">    <p style="margin: 0px"> <span style="color: #2b91af">because</span> b = () =>     <p style="margin: 0px"> sut.start();    <p style="margin: 0px">    <p style="margin: 0px"> <span style="color: #2b91af">it</span> should_start_the_application_shell = () =>    <p style="margin: 0px"> application_shell.received(x => x.start());    <p style="margin: 0px">    <p style="margin: 0px"> <span style="color: #2b91af">it</span> should_start_all_of_the_application_modules = () =>    <p style="margin: 0px"> start_all_modules.received(x => x.run());    <p style="margin: 0px">    <p style="margin: 0px"> <span style="color: #2b91af">it</span> should_register_itself_as_a_listener_with_the_event_aggregator = () =>    <p style="margin: 0px"> event_aggregator.received(x => x.register_listener(sut));    <p style="margin: 0px">    <p style="margin: 0px"> <span style="color: #ff8000">static</span> <span style="color: #2b91af">IApplicationShellPresenter</span> application_shell;    <p style="margin: 0px"> <span style="color: #ff8000">static</span> <span style="color: #2b91af">IStartAllModules</span> start_all_modules;    <p style="margin: 0px"> <span style="color: #ff8000">static</span> <span style="color: #2b91af">IEventAggregator</span> event_aggregator;    <p style="margin: 0px"> }    <p style="margin: 0px">    <p style="margin: 0px">} </div>  
  
Notice how at the top I am now creating a container class which is named {SUT}specs:  <div style="font-size: 14pt; background: black; color: white; font-family: consolas">   <p style="margin: 0px"><span style="color: #ff8000">public</span> <span style="color: #ff8000">class</span> <span style="color: yellow">ApplicationControllerSpecs</span> </div>  
  
All of the concerns for the ApplicationController will be housed inside this class. From an organizational perspective I can now have a superclass for all of my concerns for a particular SUT named concern:  <div style="font-size: 14pt; background: black; color: white; font-family: consolas">   <p style="margin: 0px"><span style="color: #ff8000">public</span> <span style="color: #ff8000">abstract</span> <span style="color: #ff8000">class</span> <span style="color: yellow">concern</span> : <span style="color: yellow">observations_for_a_sut_with_a_contract</span><<span style="color: #2b91af">IApplicationController</span>, <span style="color: yellow">ApplicationController</span>>    <p style="margin: 0px">{    <p style="margin: 0px"> <span style="color: #ff8000">protected</span> <span style="color: #2b91af">IApplicationShellView</span> shell_presenter;    <p style="margin: 0px">} </div>  
Before, I would place my concerns directly at the root of the file (not nested inside a container class), this meant that when I went to derive a concern from a base concern, I would have to filter through a big ReSharper list of all of the base test classes in the solution that started with the word concern. Because I was following a convention of “concern_for_[sut]”, I would see more than I wanted. Now when I am inside of a container class and am writing a concern that I want to derive from its parent concern,typing con followed by CTRL-SPACE will only give me a very small set of options. I also don’t need to come up with a fancy name for the initial concern superclass. I can just call it concern. Each *Specs file in my current application follows this convention, and each one has an initial superclass named concern. You don’t need the superclass, I just find it a convenient place to put fields etc that can often crowd up the test, common results etc.  
Develop With Passion!!




